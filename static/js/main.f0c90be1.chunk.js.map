{"version":3,"sources":["index.js","assets/vert.js","assets/frag.js"],"names":["Particles","points","initialPositions","map","v","slice","w","Number","filter","g","find","isNaN","flat","initialColors","uniforms","useMemo","time","value","positions","Float32Array","colors","geom","useRef","useFrame","clock","current","material","getElapsedTime","geometry","verticesNeedUpdate","ref","attach","attachObject","count","length","array","itemSize","vertexShader","fragmentShader","vertexColors","App","useState","setPoints","progress","setProgress","camera","controls","useEffect","console","log","window","location","hostname","fetch","then","fetchProgress","onProgress","percentage","r","text","data","lines","split","style","backgroundColor","width","height","position","visibility","textAlign","display","alignItems","justifyContent","top","bottom","right","left","backgroundBlendMode","fontFamily","fontSize","fontWeight","color","onClick","object","target","ReactDOM","render","document","getElementById"],"mappings":"oOASA,SAASA,EAAT,GAA8B,IAAVC,EAAS,EAATA,OAEZC,EAAmBD,EAAOE,KAAI,SAAAC,GAAC,OAAEA,EAAEC,MAAM,EAAE,GAAGF,KAAI,SAAAG,GAAC,OAAEC,OAAOD,SAAKE,QAAO,SAAAC,GAAC,OAAEA,EAAEC,MAAK,SAAAN,GAAC,OAAGO,MAAMP,SAAKD,KAAI,SAAAC,GAAC,MAAE,CAACA,EAAE,GAAGA,EAAE,GAAGA,EAAE,OAAKQ,OAC1HC,EAAgBZ,EAAOE,KAAI,SAAAC,GAAC,OAAEA,EAAEC,MAAM,GAAGF,KAAI,SAAAG,GAAC,OAAEC,OAAOD,GAAG,UAAMM,OAChEE,EAAWC,mBAAQ,iBAAO,CAAEC,KAAM,CAAEC,MAAO,MAAU,IACrDC,EAAYH,mBAAQ,kBAAM,IAAII,aAAajB,KAAmB,CAACA,IAC/DkB,EAASL,mBAAQ,kBAAM,IAAII,aAAaN,KAAe,CAACA,IAExDQ,EAAOC,mBAQb,OAPAC,aAAS,YAAgB,IAAbC,EAAY,EAAZA,MACNH,EAAKI,UACPJ,EAAKI,QAAQC,SAASZ,SAASE,KAAKC,MAAQO,EAAMG,iBAClDN,EAAKI,QAAQG,SAASC,oBAAqB,MAK7C,4BAAQC,IAAKT,GACX,oCAAgBU,OAAO,YACrB,qCAAiBC,aAAc,CAAC,aAAc,YAAaC,MAAOf,EAAUgB,OAAS,EAAGC,MAAOjB,EAAWkB,SAAU,IAGpH,qCAAiBJ,aAAc,CAAC,aAAc,SAAUC,MAAOb,EAAOc,OAAS,EAAGC,MAAOf,EAAQgB,SAAU,KAG7G,oCACEL,OAAO,WACPjB,SAAUA,EACVuB,aCrCM,8MDsCNC,eEtCM,sFFuCNC,cAAY,KAMpB,IAAMC,EAAM,WAAK,IAAD,EAEcC,qBAFd,mBAEPxC,EAFO,KAECyC,EAFD,OAGkBD,qBAHlB,mBAGPE,EAHO,KAGGC,EAHH,KAIRC,EAASvB,mBACTwB,EAAWxB,mBAwBjB,OAvBAyB,qBAAU,WACNC,QAAQC,IAAIC,OAAOC,SAASC,UACXC,MACY,cAA3BH,OAAOC,SAASC,SAChB,YAAa,oDACbE,KACAC,YAAc,CACZC,WAAWb,GACgB,MAAtBA,EAASc,WACVb,EAAY,cAEZA,EAAYD,EAASc,WAAW,SAItCH,MAAK,SAAAI,GAA6B,OAAxBd,EAAY,WAAmBc,EAAEC,UAC3CL,MAAK,SAAAM,GACL,IAAMC,EAAQD,EAAKE,MAAM,MACzBpB,EAAUmB,EAAM1D,KAAI,SAAAC,GAAC,OAAEA,EAAE0D,MAAM,SAC/BlB,EAAY,eAEhB,CAAEF,IAEG,oCACL,yBAAKqB,MAAO,CACVC,gBAAgB,QAChBC,MAAM,QACNC,OAAQ,QACRC,SAAS,WACTC,WAAuB,WAAXzB,EAAoB,SAAS,UACzC0B,UAAU,SACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,IAAI,EACJC,OAAO,EACPC,MAAM,EACNC,KAAK,EACLC,oBAAqB,SACrBC,WAAY,wBACZC,SAAU,OACVC,WAAW,YAEX,0BAAMjB,MAAO,CAACkB,MAAM,UACjBtC,IAGL,kBAAC,IAAD,CACEuC,QAAS,kBAAIlC,QAAQC,IAAIH,EAASrB,QAASqB,EAASrB,QAAQ0D,SAC5DrD,IAAKe,EACLA,OAAQ,CAAEsB,SAAU,CAAC,GAAI,GAAI,KAE5BlE,GAAU,kBAACD,EAAD,CAAWC,OAAQA,IAC9B,kBAAC,IAAD,CACE6B,IAAKgB,EACLsC,OAAQ,CAAC,EAAG,IAAK,UAOzBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.f0c90be1.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Canvas, useFrame } from \"react-three-fiber\"\r\nimport { OrbitControls } from 'drei'\r\nimport fetchProgress from 'fetch-progress'\r\nimport \"./styles.css\"\r\nimport frag from './assets/frag'\r\nimport vert from './assets/vert'\r\n\r\nfunction Particles({points}) {\r\n\r\n  const initialPositions = points.map(v=>v.slice(0,3).map(w=>Number(w))).filter(g=>g.find(v=>!isNaN(v))).map(v=>[v[0],v[2],v[1]]).flat()\r\n  const initialColors = points.map(v=>v.slice(3).map(w=>Number(w)/255)).flat()\r\n  const uniforms = useMemo(() => ({ time: { value: 1.0 } }), [])\r\n  const positions = useMemo(() => new Float32Array(initialPositions), [initialPositions])\r\n  const colors = useMemo(() => new Float32Array(initialColors),[initialColors])\r\n\r\n  const geom = useRef()\r\n  useFrame(({ clock }) => {\r\n    if (geom.current) {\r\n      geom.current.material.uniforms.time.value = clock.getElapsedTime()\r\n      geom.current.geometry.verticesNeedUpdate = true\r\n    }\r\n  })\r\n\r\n  return (\r\n    <points ref={geom}>\r\n      <bufferGeometry attach=\"geometry\">\r\n        <bufferAttribute attachObject={[\"attributes\", \"position\"]} count={positions.length / 3} array={positions} itemSize={3} />\r\n        {/* <bufferAttribute attachObject={[\"attributes\", \"velocity\"]} count={velocities.length / 3} array={velocities} itemSize={3} />\r\n        <bufferAttribute attachObject={[\"attributes\", \"acceleration\"]} count={accelerations.length / 3} array={accelerations} itemSize={3} /> */}\r\n        <bufferAttribute attachObject={[\"attributes\", \"color\"]} count={colors.length / 3} array={colors} itemSize={3} />\r\n\r\n      </bufferGeometry>\r\n      <shaderMaterial \r\n        attach=\"material\" \r\n        uniforms={uniforms}\r\n        vertexShader={vert}\r\n        fragmentShader={frag}\r\n        vertexColors\r\n      />\r\n    </points>\r\n  )\r\n}\r\n\r\nconst App = ()=>{\r\n\r\n  const [points, setPoints] = useState()\r\n  const [progress, setProgress] = useState()\r\n  const camera = useRef()\r\n  const controls = useRef()\r\n  useEffect(()=>{\r\n      console.log(window.location.hostname)\r\n      const response = fetch( \r\n        window.location.hostname==='localhost'?\r\n        '32FFF.xyz': 'https://bby.blob.core.windows.net/$web/32FFF.xyz'\r\n      ).then(\r\n        fetchProgress({\r\n          onProgress(progress) {\r\n            if(progress.percentage===100){\r\n              setProgress('Loading...');\r\n            }else{\r\n              setProgress(progress.percentage+'%');\r\n            }\r\n          },\r\n        })\r\n      ).then(r=>{ setProgress('Loading'); return r.text();}\r\n      ).then(data=>{\r\n        const lines = data.split(\"\\n\")\r\n        setPoints(lines.map(v=>v.split(' '))) \r\n        setProgress('Loaded') \r\n      })\r\n  },[ setPoints ])\r\n\r\n  return <>\r\n    <div style={{\r\n      backgroundColor:'black', \r\n      width:'100vw', \r\n      height: '100vh', \r\n      position:'absolute', \r\n      visibility: progress==='Loaded'?'hidden':'visible',\r\n      textAlign:'center',\r\n      display: 'flex',\r\n      alignItems: 'center', /* Vertical center alignment */\r\n      justifyContent: 'center',\r\n      top:0,\r\n      bottom:0, \r\n      right:0, \r\n      left:0,\r\n      backgroundBlendMode: 'normal',\r\n      fontFamily: 'Helvetica, Sans-Serif',\r\n      fontSize: '32px',\r\n      fontWeight:'lighter'\r\n    }} >\r\n      <span style={{color:'white'}}>\r\n        {progress}\r\n      </span>\r\n    </div>\r\n    <Canvas \r\n      onClick={()=>console.log(controls.current, controls.current.object)} \r\n      ref={camera} \r\n      camera={{ position: [10, 5, -5] }}\r\n    >\r\n      {points && <Particles points={points} />}\r\n      <OrbitControls \r\n        ref={controls} \r\n        target={[0, 3.3, 1.5]} \r\n      />\r\n    </Canvas>\r\n  </>\r\n}\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"))\r\n","export default `\nuniform float time;\nvarying vec3 vColor;\nvoid main() {\n    vColor = color;\n    gl_Position = projectionMatrix \n        * modelViewMatrix\n        * vec4(position, 1.0);\n    gl_PointSize = 3.0;\n}`","export default `\nvarying vec3 vColor;\nvoid main() {\n  gl_FragColor = vec4( vColor.rgb, 1.0 );\n}`"],"sourceRoot":""}