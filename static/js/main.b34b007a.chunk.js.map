{"version":3,"sources":["assets/frag.js","assets/vert_smooth.js","components/XYZModel/index.js","components/PLYModel/index.js","assets/vert_fast.js","assets/frag_tint.js","assets/vert.js","index.js"],"names":["Particles","points","initialPositions","map","v","slice","w","Number","filter","g","find","isNaN","flat","initialColors","uniforms","useMemo","time","value","positions","Float32Array","colors","geom","useRef","useFrame","clock","current","material","getElapsedTime","geometry","verticesNeedUpdate","ref","attach","attachObject","count","length","array","itemSize","vertexShader","vert_smooth","fragmentShader","frag","vertexColors","url","useState","setPoints","progress","setProgress","controls","useEffect","console","log","window","location","hostname","fetch","then","fetchProgress","onProgress","percentage","r","text","data","lines","split","style","backgroundColor","width","height","position","visibility","textAlign","display","alignItems","justifyContent","top","bottom","right","left","backgroundBlendMode","fontFamily","fontSize","fontWeight","color","onClick","object","camera","target","THREE","require","PLYLoader","dict","default","vert","vertSmooth","attributes","rotation","Math","PI","load","Home","to","App","local","basename","path","exact","XYZModel","PLYModel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b34b007a.chunk.js","sourcesContent":["export default `\nvarying vec3 vColor;\nvoid main() {\n  gl_FragColor = vec4( vColor.rgb, 1.0 );\n}`","export default `\nuniform float time;\nvarying vec3 vColor;\nvarying vec3 pos;\nvoid main() {\n    pos = position;\n    vColor = color;\n    float speed = 2.0;\n    gl_Position = projectionMatrix \n        * modelViewMatrix\n        * vec4(\n            vec3(\n              sin(time * speed + pos[0]) * 0.15 + pos[0],\n              cos(time * speed + pos[1]) * 0.15 + pos[1],\n              sin(time * speed + pos[2]) * 0.15 + pos[2]\n            ), 1.0);\n    gl_PointSize = 3.0;\n}`\n","import React, { useEffect, useMemo, useRef, useState } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Canvas, useFrame } from \"react-three-fiber\"\r\nimport { OrbitControls } from 'drei'\r\nimport fetchProgress from 'fetch-progress'\r\nimport frag from 'assets/frag'\r\nimport vert from 'assets/vert'\r\nimport frag_rainbow from 'assets/frag_rainbow'\r\nimport vert_dense from 'assets/vert_dense'\r\nimport vert_smooth from \"assets/vert_smooth\"\r\n\r\nfunction Particles({points}) {\r\n\r\n  const initialPositions = points.map(v=>v.slice(0,3).map(w=>Number(w))).filter(g=>g.find(v=>!isNaN(v))).map(v=>[v[0],v[2],v[1]]).flat()\r\n  const initialColors = points.map(v=>v.slice(3).map(w=>Number(w)/255)).flat()\r\n  const uniforms = useMemo(() => ({ time: { value: 1.0 } }), [])\r\n  const positions = useMemo(() => new Float32Array(initialPositions), [initialPositions])\r\n  const colors = useMemo(() => new Float32Array(initialColors),[initialColors])\r\n\r\n  const geom = useRef()\r\n  useFrame(({ clock }) => {\r\n    if (geom.current) {\r\n      geom.current.material.uniforms.time.value = clock.getElapsedTime()\r\n      geom.current.geometry.verticesNeedUpdate = true\r\n    }\r\n  })\r\n\r\n  return (\r\n    <points ref={geom}>\r\n      <bufferGeometry attach=\"geometry\">\r\n        <bufferAttribute attachObject={[\"attributes\", \"position\"]} count={positions.length / 3} array={positions} itemSize={3} />\r\n        {/* <bufferAttribute attachObject={[\"attributes\", \"velocity\"]} count={velocities.length / 3} array={velocities} itemSize={3} />\r\n        <bufferAttribute attachObject={[\"attributes\", \"acceleration\"]} count={accelerations.length / 3} array={accelerations} itemSize={3} /> */}\r\n        <bufferAttribute attachObject={[\"attributes\", \"color\"]} count={colors.length / 3} array={colors} itemSize={3} />\r\n\r\n      </bufferGeometry>\r\n      <shaderMaterial \r\n        attach=\"material\" \r\n        uniforms={uniforms}\r\n        vertexShader={vert_smooth}\r\n        fragmentShader={frag}\r\n        vertexColors\r\n      />\r\n    </points>\r\n  )\r\n}\r\n\r\nexport default ({url})=>{\r\n\r\n  const [points, setPoints] = useState()\r\n  const [progress, setProgress] = useState()\r\n  const controls = useRef()\r\n  \r\n  useEffect(()=>{\r\n      console.log(window.location.hostname)\r\n      const response = fetch(url).then(\r\n        fetchProgress({\r\n          onProgress(progress) {\r\n            if(progress.percentage===100){\r\n              setProgress('Loading...');\r\n            }else{\r\n              setProgress(progress.percentage+'%');\r\n            }\r\n          },\r\n        })\r\n      ).then(r=>{ setProgress('Loading'); return r.text();}\r\n      ).then(data=>{\r\n        const lines = data.split(\"\\n\")\r\n        setPoints(lines.map(v=>v.split(' '))) \r\n        setProgress('Loaded') \r\n      })\r\n  },[ setPoints ])\r\n\r\n  return <>\r\n    <div style={{\r\n      backgroundColor:'black', \r\n      width:'100vw', \r\n      height: '100vh', \r\n      position:'absolute', \r\n      visibility: progress==='Loaded'?'hidden':'visible',\r\n      textAlign:'center',\r\n      display: 'flex',\r\n      alignItems: 'center', /* Vertical center alignment */\r\n      justifyContent: 'center',\r\n      top:0,\r\n      bottom:0, \r\n      right:0, \r\n      left:0,\r\n      backgroundBlendMode: 'normal',\r\n      fontFamily: 'Helvetica, Sans-Serif',\r\n      fontSize: '32px',\r\n      fontWeight:'lighter'\r\n    }} >\r\n      <span style={{color:'white'}}>\r\n        {progress}\r\n      </span>\r\n    </div>\r\n    <Canvas \r\n      onClick={()=>console.log(controls.current, controls.current.object)} \r\n      camera={{ position: [10, 5, -5] }}\r\n    >\r\n      {points && <Particles points={points} />}\r\n      <OrbitControls \r\n        ref={controls} \r\n        target={[0, 3.3, 1.5]} \r\n      />\r\n    </Canvas>\r\n  </>\r\n}","import React, { useEffect, useMemo, useRef, useState } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\n// import * as THREE from 'three'\r\nimport { Canvas, useFrame } from \"react-three-fiber\"\r\nimport { OrbitControls } from 'drei'\r\nimport fetchProgress from 'fetch-progress'\r\nimport frag from 'assets/frag'\r\nimport vert from 'assets/vert'\r\nimport fragRainbow from 'assets/frag_rainbow'\r\nimport fragTint from 'assets/frag_tint'\r\nimport vertDense from 'assets/vert_dense'\r\nimport vertSmooth from 'assets/vert_smooth'\r\nimport vertFast from 'assets/vert_fast'\r\n\r\nimport { Route, useHistory } from 'react-router-dom'\r\n\r\nconst THREE = require('three');\r\nconst PLYLoader = require('three-ply-loader');\r\n\r\nconst dict = {\r\n  default: {\r\n    position: [1.5, 1, 1.8],\r\n    target: [0.3, 1, 0]\r\n  },\r\n  'models/MaksyCrew.ply': {\r\n    position: [1.5, 1, 1.8],\r\n    target: [0.3, 1, 0],\r\n    vert: vertFast,\r\n    frag: frag\r\n  },\r\n  'models/Lift.ply': {\r\n    position: [1.4, 1, -0.6],\r\n    target: [0.3, 1, 0],\r\n    vert: vertSmooth,\r\n    frag: fragTint\r\n  }\r\n}\r\nfunction Particles({points, url}) {\r\n\r\n  const uniforms = useMemo(() => ({ time: { value: 1.0 } }), [])\r\n  const positions = useMemo(() =>points.attributes.position.array, [points.attributes.position])\r\n  const colors = useMemo(() => points.attributes.color.array, [points.attributes.color])\r\n  // console.log(colors, positions)\r\n  const geom = useRef()\r\n  useFrame(({ clock }) => {\r\n    if (geom.current) {\r\n      geom.current.material.uniforms.time.value = clock.getElapsedTime()\r\n      geom.current.geometry.verticesNeedUpdate = true\r\n    }\r\n  })\r\n\r\n  return (\r\n    <points ref={geom} rotation={[-Math.PI/2,0,0]}>\r\n      <bufferGeometry attach=\"geometry\">\r\n        <bufferAttribute attachObject={[\"attributes\", \"position\"]} count={positions.length / 3} array={positions} itemSize={3} />\r\n        {/* <bufferAttribute attachObject={[\"attributes\", \"velocity\"]} count={velocities.length / 3} array={velocities} itemSize={3} />\r\n        <bufferAttribute attachObject={[\"attributes\", \"acceleration\"]} count={accelerations.length / 3} array={accelerations} itemSize={3} /> */}\r\n        <bufferAttribute attachObject={[\"attributes\", \"color\"]} count={colors.length / 3} array={colors} itemSize={3} />\r\n\r\n      </bufferGeometry>\r\n      <shaderMaterial \r\n        attach=\"material\" \r\n        uniforms={uniforms}\r\n        vertexShader={dict[url]?dict[url].vert:vert}\r\n        fragmentShader={dict[url]?dict[url].frag:frag}\r\n        vertexColors\r\n      />\r\n    </points>\r\n  )\r\n}\r\n\r\nexport default ({url})=>{\r\n  const [points, setPoints] = useState()\r\n  const [progress, setProgress] = useState()\r\n  const camera = useRef()\r\n  const controls = useRef()\r\n\r\n  useEffect(()=>{\r\n    PLYLoader(THREE);\r\n\r\n    const loader = new THREE.PLYLoader();\r\n    loader.load(url, function (geometry) {\r\n      if(!points) {\r\n        setPoints(geometry)\r\n      }\r\n    });\r\n  })\r\n\r\n  return  <>\r\n    <div style={{\r\n      backgroundColor:'black', \r\n      width:'100vw', \r\n      height: '100vh', \r\n      position:'absolute', \r\n      visibility: points?'hidden':'visible',\r\n      textAlign:'center',\r\n      display: 'flex',\r\n      alignItems: 'center', /* Vertical center alignment */\r\n      justifyContent: 'center',\r\n      top:0,\r\n      bottom:0, \r\n      right:0, \r\n      left:0,\r\n      backgroundBlendMode: 'normal',\r\n      fontFamily: 'Helvetica, Sans-Serif',\r\n      fontSize: '32px',\r\n      fontWeight:'lighter'\r\n    }} >\r\n      <span style={{color:'white'}}>\r\n        Loading...\r\n      </span>\r\n    </div>\r\n\r\n    <Canvas \r\n      onClick={()=>console.log(controls.current, controls.current.object)} \r\n      camera={{ position: dict[url]?dict[url].position:dict.default.position }}\r\n    >\r\n      {points && <Particles points={points} {...{url}} />}\r\n      <OrbitControls \r\n        ref={controls} \r\n        target={dict[url]?dict[url].target:dict.default.target} \r\n      />\r\n    </Canvas>\r\n  </>\r\n}\r\n","export default `\nuniform float time;\nvarying vec3 vColor;\nvarying vec3 pos;\nvoid main() {\n    pos = position;\n    vColor = color;\n    float speed = 2.0;\n    float coef = 20.0;\n    gl_Position = projectionMatrix \n        * modelViewMatrix\n        * vec4(\n            vec3(\n              sin(time * speed + pos[0] * coef) * 0.01 + pos[0],\n              cos(time * speed + pos[1] * coef) * 0.01 + pos[1],\n              sin(time * speed + pos[2] * coef) * 0.01 + pos[2]\n            ), 1.0);\n    gl_PointSize = 3.0;\n}`\n","export default `\nvarying vec3 vColor;\nvarying vec3 pos;\nuniform float time;\nvoid main() {\n  vec3 col = vColor;\n  float speed = 2.0;\n  gl_FragColor = vec4(\n    col[0] + (sin(time * speed + pos[0]) * 0.3 ),\n    col[1] + (sin(time * speed + pos[1]) * 0.3),\n    col[2] + (sin(time * speed + pos[2]) * 0.3),\n    1.0);\n}`","export default `\nuniform float time;\nvarying vec3 vColor;\nvarying vec3 pos;\nvoid main() {\n    pos = position;\n    vColor = color;\n    gl_Position = projectionMatrix \n        * modelViewMatrix\n        * vec4(position, 1.0);\n    gl_PointSize = 3.0;\n}`","import React, { useEffect, useMemo, useRef, useState } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Canvas, useFrame } from \"react-three-fiber\"\r\nimport \"./styles.css\"\r\nimport { BrowserRouter as Router, Link, Switch, useHistory, Route, useLocation } from \"react-router-dom\";\r\nimport XYZModel from 'components/XYZModel'\r\nimport PLYModel from 'components/PLYModel'\r\n\r\nconst Home = ()=>{\r\n  return <div>\r\n  <ul>\r\n    <li>\r\n      <Link to=\"/\">Home</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/hall\">Hall</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/room\">Room</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/lift\">Lift</Link>\r\n    </li>\r\n  </ul>\r\n  </div>\r\n}\r\n\r\nconst App = ()=>{\r\n  const [local] = useState(window.location.hostname==='localhost')\r\n\r\n  return (\r\n    <Router basename={local?\"/\":\"/shader-points/\"}>\r\n      <Route path=\"/\" exact >\r\n        <Home/>\r\n      </Route>\r\n      <Route path='/hall' >\r\n        <XYZModel url={local? 'models/32FFF.xyz': 'https://bby.blob.core.windows.net/$web/32FFF.xyz'} />\r\n      </Route>\r\n      <Route path='/room' >\r\n        <PLYModel url='models/MaksyCrew.ply' />\r\n      </Route>\r\n      <Route path='/lift' >\r\n        <PLYModel url='models/Lift.ply' />\r\n      </Route>\r\n    </Router>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"))\r\n"],"sourceRoot":""}