{"version":3,"sources":["assets/32FFF.xyz","index.js","assets/vert.js","assets/frag.js"],"names":["module","exports","Particles","points","initialPositions","map","v","slice","w","Number","flat","initialColors","uniforms","useMemo","time","value","positions","Float32Array","colors","geom","useRef","useFrame","clock","current","material","getElapsedTime","geometry","verticesNeedUpdate","ref","attach","attachObject","count","length","array","itemSize","vertexShader","fragmentShader","vertexColors","Controls","controls","useThree","camera","gl","update","args","domElement","enableDamping","dampingFactor","rotateSpeed","extend","OrbitControls","App","useState","setPoints","useEffect","a","fetch","model","text","entries","lines","split","console","log","ParseModel","position","ReactDOM","render","document","getElementById"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,mC,6MCW3C,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,OAEZC,EAAmBD,EAAOE,KAAI,SAAAC,GAAC,OAAEA,EAAEC,MAAM,EAAE,GAAGF,KAAI,SAAAG,GAAC,OAAEC,OAAOD,SAAKE,OACjEC,EAAgBR,EAAOE,KAAI,SAAAC,GAAC,OAAEA,EAAEC,MAAM,GAAGF,KAAI,SAAAG,GAAC,OAAEC,OAAOD,GAAG,UAAME,OAChEE,EAAWC,mBAAQ,iBAAO,CAAEC,KAAM,CAAEC,MAAO,MAAU,IACrDC,EAAYH,mBAAQ,kBAAM,IAAII,aAAab,KAAmB,CAACA,IAC/Dc,EAASL,mBAAQ,kBAAM,IAAII,aAAaN,KAAe,CAACA,IAExDQ,EAAOC,mBAQb,OAPAC,aAAS,YAAgB,IAAbC,EAAY,EAAZA,MACNH,EAAKI,UACPJ,EAAKI,QAAQC,SAASZ,SAASE,KAAKC,MAAQO,EAAMG,iBAClDN,EAAKI,QAAQG,SAASC,oBAAqB,MAK7C,4BAAQC,IAAKT,GACX,oCAAgBU,OAAO,YACrB,qCAAiBC,aAAc,CAAC,aAAc,YAAaC,MAAOf,EAAUgB,OAAS,EAAGC,MAAOjB,EAAWkB,SAAU,IAGpH,qCAAiBJ,aAAc,CAAC,aAAc,SAAUC,MAAOb,EAAOc,OAAS,EAAGC,MAAOf,EAAQgB,SAAU,KAG7G,oCACEL,OAAO,WACPjB,SAAUA,EACVuB,aCvCM,8MDwCNC,eExCM,sFFyCNC,cAAY,KAMpB,SAASC,IACP,IAAMC,EAAWnB,mBADC,EAEKoB,cAAfC,EAFU,EAEVA,OAAQC,EAFE,EAEFA,GAEhB,OADArB,aAAS,kBAAMkB,EAAShB,QAAQoB,YACzB,mCAAef,IAAKW,EAAUK,KAAM,CAACH,EAAQC,EAAGG,YAAaC,eAAa,EAACC,cAAe,IAAMC,YAAa,KA1CtHC,YAAO,CAAEC,oBA6CT,IAAMC,EAAM,WAAK,IAAD,EAEcC,qBAFd,mBAEPjD,EAFO,KAECkD,EAFD,KAad,OAVAC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACYC,MAAMC,KADlB,8BAC0BC,OAD1B,OACXC,EADW,OAEXC,EAAQD,EAAQE,MAAM,MAC5BC,QAAQC,IAAIH,EAAM,IAClBP,EAAUO,EAAMvD,KAAI,SAAAC,GAAC,OAAEA,EAAEuD,MAAM,SAJd,2CAAH,qDAMhBG,KACA,CAAEX,IAEG,kBAAC,IAAD,CAAQZ,OAAQ,CAAEwB,SAAU,CAAC,EAAG,EAAG,MACvC9D,GAAU,kBAACD,EAAD,CAAWC,OAAQA,IAC9B,kBAACmC,EAAD,QAKJ4B,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.ec82bfa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/32FFF.1c4f20fe.xyz\";","import React, { useEffect, useMemo, useRef, useState } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Canvas, extend, useFrame, useThree } from \"react-three-fiber\"\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\nimport \"./styles.css\"\nimport frag from './assets/frag'\nimport vert from './assets/vert'\nimport model from './assets/32FFF.xyz'\n\nextend({ OrbitControls })\n\nfunction Particles({points}) {\n\n  const initialPositions = points.map(v=>v.slice(0,3).map(w=>Number(w))).flat()\n  const initialColors = points.map(v=>v.slice(3).map(w=>Number(w)/255)).flat()\n  const uniforms = useMemo(() => ({ time: { value: 1.0 } }), [])\n  const positions = useMemo(() => new Float32Array(initialPositions), [initialPositions])\n  const colors = useMemo(() => new Float32Array(initialColors),[initialColors])\n\n  const geom = useRef()\n  useFrame(({ clock }) => {\n    if (geom.current) {\n      geom.current.material.uniforms.time.value = clock.getElapsedTime()\n      geom.current.geometry.verticesNeedUpdate = true\n    }\n  })\n\n  return (\n    <points ref={geom}>\n      <bufferGeometry attach=\"geometry\">\n        <bufferAttribute attachObject={[\"attributes\", \"position\"]} count={positions.length / 3} array={positions} itemSize={3} />\n        {/* <bufferAttribute attachObject={[\"attributes\", \"velocity\"]} count={velocities.length / 3} array={velocities} itemSize={3} />\n        <bufferAttribute attachObject={[\"attributes\", \"acceleration\"]} count={accelerations.length / 3} array={accelerations} itemSize={3} /> */}\n        <bufferAttribute attachObject={[\"attributes\", \"color\"]} count={colors.length / 3} array={colors} itemSize={3} />\n\n      </bufferGeometry>\n      <shaderMaterial \n        attach=\"material\" \n        uniforms={uniforms}\n        vertexShader={vert}\n        fragmentShader={frag}\n        vertexColors\n      />\n    </points>\n  )\n}\n\nfunction Controls() {\n  const controls = useRef()\n  const { camera, gl } = useThree()\n  useFrame(() => controls.current.update())\n  return <orbitControls ref={controls} args={[camera, gl.domElement]} enableDamping dampingFactor={0.05} rotateSpeed={0.6} />\n}\n\nconst App = ()=>{\n\n  const [points, setPoints] = useState()\n  useEffect(()=>{\n    const ParseModel = async ()=>{\n      const entries = await (await fetch(model)).text()\n      const lines = entries.split(\"\\n\")\n      console.log(lines[0])\n      setPoints(lines.map(v=>v.split(' ')))\n    }\n    ParseModel()\n  },[ setPoints ])\n\n  return <Canvas camera={{ position: [0, 0, 20] }}>\n    {points && <Particles points={points} />}\n    <Controls />\n  </Canvas>\n}\n\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))\n","export default `\nuniform float time;\nvarying vec3 vColor;\nvoid main() {\n    vColor = color;\n    gl_Position = projectionMatrix \n        * modelViewMatrix\n        * vec4(position, 1.0);\n    gl_PointSize = 3.0;\n}`","export default `\nvarying vec3 vColor;\nvoid main() {\n  gl_FragColor = vec4( vColor.rgb, 1.0 );\n}`"],"sourceRoot":""}